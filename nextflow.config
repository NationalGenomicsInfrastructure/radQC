/*
 * -------------------------------------------------
 *  radseqQC Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  version = "0.1.2" // Pipeline version
  container = 'remiolsen/nf-core-radseq:latest' // Container slug. Stable releases should specify release tag!
  nf_required_version = '0.30.0' // Minimum version of nextflow required

  help = false
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  trim_adapters = "${baseDir}/misc/adapters.fa"
  singleEnd = false
  trim_truncate = 125
  trim_head = 0
  enzyme = "ecoRI"
  project = null
  small_m = 3
  big_m = 2
  small_n = 1
  // outputs from Stacks/populations
  structure = false
  genepop = false
  plink = false
  vcf = true
  fasta_out = true
  phylip = false
  radpainter = false
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  local {
    includeConfig 'conf/local.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity {
    includeConfig 'conf/singularity.config'
  }
  slurm {
    includeConfig 'conf/base.config'
    process.executor = "slurm"
    process.clusterOptions = { "-A $params.project ${params.clusterOptions ?: ''}" }
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }

  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/radseqQC_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/radseqQC_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/radseqQC_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/radseqQC_dag.svg"
}

manifest {
  name = 'remiolsen/nf-core-radseq'
  homePage = 'https://github.com/remiolsen/nf-core-radseq'
  description = 'Pipeline for QC of RAD-seq data'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
